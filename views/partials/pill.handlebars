<canvas id="c"></canvas>
  <script  type="importmap">{
	"imports": {
		"three": "https://cdn.jsdelivr.net/npm/three@0.121.1/build/three.module.js",
		"three/addons/": "https://unpkg.com/three@0.164.0/examples/jsm/"
	}
}</script>


<script type="module">
	import * as THREE from 'three';
	import { GLTFLoader } from "https://cdn.jsdelivr.net/npm/three@0.121.1/examples/jsm/loaders/GLTFLoader.js";
	import {RGBELoader} from "https://cdn.jsdelivr.net/npm/three@0.124/examples/jsm/loaders/RGBELoader.js"
	import { MeshSurfaceSampler } from 'https://cdn.jsdelivr.net/npm/three@0.121.1/examples/jsm/math/MeshSurfaceSampler.js';




	async function  main() {

		document.getElementById('submit').addEventListener('click', moveGroup);
		const divValue = 100;
		const scales = [0.5,0.5,0.5,0.5];
		const param1 = document.querySelector("#param1");
		function listener1() {
				scales[0] = param1.value/divValue;
			};
		param1.addEventListener("input", function() {
				listener1();
				param1.addEventListener("change", listener1);
			});
		param1.addEventListener("change", function() {
				listener1();
				param1.removeEventListener("input", listener1);
			});
		
		const param2 = document.querySelector("#param2");
		function listener2() {
				scales[1] = param2.value/divValue;
			};
		param2.addEventListener("input", function() {
				listener2();
				param2.addEventListener("change", listener2);
			});
		param2.addEventListener("change", function() {
				listener2();
				param2.removeEventListener("input", listener2);
			});
		const param3 = document.querySelector("#param3");
		function listener3() {
				scales[2] = param3.value/divValue;
			};
		param3.addEventListener("input", function() {
				listener3();
				param3.addEventListener("change", listener3);
			});
		param3.addEventListener("change", function() {
				listener3();
				param3.removeEventListener("input", listener3);
			});
		const param4 = document.querySelector("#param4");
		function listener4() {
				scales[3] = param4.value/divValue;
			};
		param4.addEventListener("input", function() {
				listener4();
				param4.addEventListener("change", listener4);
			});
		param4.addEventListener("change", function() {
				listener4();
				param4.removeEventListener("input", listener4);
			});

		const canvas = document.querySelector( '#c' );
		const renderer = new THREE.WebGLRenderer( { antialias: true, alpha: true, canvas } );
 		renderer.setSize(window.innerWidth, window.innerHeight);

		const camera = new THREE.PerspectiveCamera( 45, window.innerWidth / window.innerHeight, 0.25, 20 );
		camera.position.z =5;

		const scene = new THREE.Scene();
		const group = new THREE.Group();

		let model;
		let cubes = [];

		let targetZ = group.position.z;
		let isAnimating = false;
		let hasReset = false;
		let animationStartTime = null;
		const animationDuration = 1500; // 1 second
		let rotationSpeed =  0.001;


	  	const hdrEquirect = new RGBELoader().load(
			"glb/env.hdr",
				() => {
					hdrEquirect.mapping = THREE.EquirectangularReflectionMapping;
					scene.environment =hdrEquirect;
				}
			);
		const material = new THREE.MeshPhysicalMaterial({
			color: 'rgb(0, 255, 47)',    // red (can also use a CSS color string here)
			transmission: 0.3,
			roughness: 1,
			envMap: hdrEquirect,
	

		});

		const mat = new THREE.MeshPhongMaterial({
			color: 'rgb(0, 255, 47)',
			metalness: 0.1
			});
		const mat2 = new THREE.MeshPhongMaterial({
			color: 'rgb(255, 0, 255)',
			metalness: 0.1		
			});
		const mat3 = new THREE.MeshPhongMaterial({
			color: 'rgb(0,0,255)', 
			metalness: 0.1		
			});
		const mat4 = new THREE.MeshPhongMaterial({
			color: 'rgb(255, 0,0)',
			metalness: 0.1		
			});
		const mats = [mat,mat2,mat3,mat4];


		const transparentmaterial = new THREE.MeshPhysicalMaterial({
			transmission: 0.9,
			roughness: 1,
			envMap: hdrEquirect,
			depthWrite: false,
			transparent:  true,
	
		});
		const loader = new GLTFLoader().setPath( '/glb/' );
		loader.load( 'pill.glb', async function ( gltf ) {
					model = gltf.scene;		
					model.children[0].children[0].material = material;
					model.children[0].children[1].material = transparentmaterial;
					model.scale.set(0.4,0.4,0.4);
					model.children[0].children[1].renderOrder = 2;
					model.children[0].children[0].renderOrder = 2;
					group.add(model);
					
					const color =  "rgb(0, 255, 47)";
					const intensity = 3;
					const light = new THREE.PointLight( color, intensity );
					light.position.set( 0,0, 0  );


				
					const geometries = [
					new THREE.BoxGeometry(),
					new THREE.BoxGeometry(),
					new THREE.BoxGeometry( ),
					new THREE.BoxGeometry( ),
					];


					for ( let i = 0, l = geometries.length; i < l; i ++ ) {

						const angle = ( i / l ) * Math.PI * 2;

						const geometry = geometries[ i ];
						const mesh = new THREE.Mesh( geometry, mats[i] );
						mesh.position.x = 0.1+i/6;
						
						mesh.rotation.set(Math.random(),Math.random(), Math.random() )
						mesh.renderOrder = 1;
						cubes.push(mesh);
						group.add(mesh);
					

					}
					scene.add(group);
					targetZ = group.position.z;

					console.log(targetZ);


					render();
			
		} );
		{

			const color =  "rgb(255, 255, 255)";
			const intensity = 3;
			const light = new THREE.DirectionalLight( color, intensity );
			light.position.set( 1,2, 0  );
			scene.add( light );
		}


		// Function to move the group along the Z-axis
		function moveGroup() {

			if (!isAnimating) {
					hasReset = false;
					// Set the target Z position (e.g., move forward by 2 units)
					targetZ = -150;
					rotationSpeed =  0.1;
					// Start the animation
					isAnimating = true;
					// Once the movement is complete, move back to the original position after a delay
					setTimeout(() => {	
						group.position.z = 10;
						targetZ = 0;
						hasReset = true;
						rotationSpeed =  0.001;

					}, animationDuration); // 500ms delay before returning
					setTimeout(() => {	
						isAnimating = false;
						animationStartTime = null;
					}, 6000);
				
			}
		}
				

		
		function render( time ) {

			time *= 0.001;

			if(model){
				group.rotation.z -= rotationSpeed;
			}
			
			for ( let i = 0, l = cubes.length; i < l; i ++ ) {

				const scale = scales[i] /1.5;
				cubes[i].scale.set(scale,scale,scale);
					

			}

			 if (isAnimating) {
				if (!animationStartTime) {
					animationStartTime = time;
				}
				const elapsed = time - animationStartTime;

				// Calculate the progress of the animation
				const progress = Math.min(elapsed / animationDuration, 1);

				// Linear interpolation (lerp) to smoothly transition the Z position
				group.position.z = THREE.MathUtils.lerp(group.position.z, targetZ, progress);
	
			}



			
			renderer.render( scene, camera );

			requestAnimationFrame( render );

		}

		requestAnimationFrame( render );

	}

	main();

</script>