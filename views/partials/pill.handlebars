<canvas id="c"></canvas>
  <script  type="importmap">{
	"imports": {
		"three": "https://cdn.jsdelivr.net/npm/three@0.121.1/build/three.module.js",
		"three/addons/": "https://unpkg.com/three@0.164.0/examples/jsm/"
	}
}</script>

<script type="module">
	import * as THREE from 'three';
	import { GLTFLoader } from "https://cdn.jsdelivr.net/npm/three@0.121.1/examples/jsm/loaders/GLTFLoader.js";
	import {RGBELoader} from "https://cdn.jsdelivr.net/npm/three@0.124/examples/jsm/loaders/RGBELoader.js"
	import { MeshSurfaceSampler } from 'https://cdn.jsdelivr.net/npm/three@0.121.1/examples/jsm/math/MeshSurfaceSampler.js';


	async function  main() {

		const canvas = document.querySelector( '#c' );
		const renderer = new THREE.WebGLRenderer( { antialias: true, alpha: true, canvas } );
 		renderer.setSize(window.innerWidth, window.innerHeight);

		const camera = new THREE.PerspectiveCamera( 45, window.innerWidth / window.innerHeight, 0.25, 20 );
		camera.position.z =5;

		const scene = new THREE.Scene();


		let model;


	  	const hdrEquirect = new RGBELoader().load(
			"glb/env.hdr",
				() => {
					hdrEquirect.mapping = THREE.EquirectangularReflectionMapping;
					scene.environment =hdrEquirect;
				}
			);
		const material = new THREE.MeshPhysicalMaterial({
			color: 'rgb(0, 255, 47)',    // red (can also use a CSS color string here)
					transmission: 0.3,
			thickness: 3,
			roughness: 1,
			envMap: hdrEquirect
		

		});
		const transparentmaterial = new THREE.MeshPhysicalMaterial({
			transmission: 0.8,
			thickness: 3,
			roughness: 1,
			envMap: hdrEquirect
	
		});
		const loader = new GLTFLoader().setPath( '/glb/' );
		loader.load( 'pill.glb', async function ( gltf ) {
					model = gltf.scene;		
					model.children[0].material = material;
					model.children[1].material = transparentmaterial;
					model.scale.set(0.4,0.4,0.4);
					scene.add( model );
					render();
			
		} );
		{

			const color =  "rgb(0, 255, 47)";
			const intensity = 3;
			const light = new THREE.DirectionalLight( color, intensity );
			light.position.set( 1, 2,0  );
			scene.add( light );
		}



		

		
		function render( time ) {

			time *= 0.001;

			if(model){
				model.rotation.z += 0.001;
			
			}
			renderer.render( scene, camera );

			requestAnimationFrame( render );

		}

		requestAnimationFrame( render );

	}

	main();

</script>